// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  householdId   String?
  role          UserRole   @default(USER)
  household     Household? @relation(fields: [householdId], references: [householdId])
  joinedAt      DateTime?  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Household {
  name        String
  householdId String        @id @default(cuid())
  members     User[]
  invitedList Invite[]
  StorageArea StorageArea[]
  Item        Item[]
}

model Invite {
  email       String     @unique
  isVerified  Boolean?   @default(false)
  Household   Household? @relation(fields: [householdId], references: [householdId])
  householdId String?
  token       String     @unique
  inviter     String?
}

model StorageArea {
  name        String
  id          String     @id @default(cuid())
  items       Item[]
  household   Household? @relation(fields: [householdId], references: [householdId])
  householdId String?
}

model Item {
  name           String
  id             String       @id @default(cuid())
  storageArea    StorageArea? @relation(fields: [storageAreaId], references: [id])
  storageAreaId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  amount         Int?         @default(0)
  amountType     String?
  expirationDate DateTime?
  household      Household?   @relation(fields: [householdId], references: [householdId])
  householdId    String?
  brand          String?
  foodCategories String[]
}

enum UserRole {
  ADMIN
  USER
}
